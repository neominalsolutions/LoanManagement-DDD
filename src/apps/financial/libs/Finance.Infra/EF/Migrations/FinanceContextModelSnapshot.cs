// <auto-generated />
using System;
using Finance.Infra.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finance.Infra.EF.Migrations
{
    [DbContext(typeof(FinanceContext))]
    partial class FinanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccountTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankAccountTransaction");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.CustomerAggregate.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.Loan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BankRate")
                        .HasColumnType("float");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoanApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.LoanApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<double>("BankRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.LoanDebt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanDebt");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccount", b =>
                {
                    b.HasOne("Finance.Domain.Aggregates.CustomerAggregate.Entities.Customer", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "Balance", b1 =>
                        {
                            b1.Property<string>("BankAccountId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Balance_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Balance_Amount");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccountTransaction", b =>
                {
                    b.HasOne("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccount", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId");

                    b.OwnsOne("Accounting.Domain.Domain.AccountAggregate.Enumarations.MoneyTransferChannel", "TransferChannel", b1 =>
                        {
                            b1.Property<string>("BankAccountTransactionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("Transafer_Channel_Code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BankAccountTransactionId");

                            b1.ToTable("BankAccountTransaction");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountTransactionId");
                        });

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "Money", b1 =>
                        {
                            b1.Property<string>("BankAccountTransactionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Money_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Money_Amount");

                            b1.HasKey("BankAccountTransactionId");

                            b1.ToTable("BankAccountTransaction");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountTransactionId");
                        });

                    b.OwnsOne("Finance.Domain.Aggregates.AccountAggregate.Enumarations.BankAccountTransactionType", "Type", b1 =>
                        {
                            b1.Property<string>("BankAccountTransactionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("Transaction_Code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BankAccountTransactionId");

                            b1.ToTable("BankAccountTransaction");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountTransactionId");
                        });

                    b.Navigation("Money")
                        .IsRequired();

                    b.Navigation("TransferChannel")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.Loan", b =>
                {
                    b.HasOne("Finance.Domain.Aggregates.CustomerAggregate.Entities.Customer", null)
                        .WithMany("Loans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "PrincipalAmount", b1 =>
                        {
                            b1.Property<string>("LoanId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Principle_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Principle_Amount");

                            b1.HasKey("LoanId");

                            b1.ToTable("Loans");

                            b1.WithOwner()
                                .HasForeignKey("LoanId");
                        });

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "RemainingAmount", b1 =>
                        {
                            b1.Property<string>("LoanId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Remaning_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Remaning_Amount");

                            b1.HasKey("LoanId");

                            b1.ToTable("Loans");

                            b1.WithOwner()
                                .HasForeignKey("LoanId");
                        });

                    b.Navigation("PrincipalAmount")
                        .IsRequired();

                    b.Navigation("RemainingAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.LoanApplication", b =>
                {
                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "AnnualIncome", b1 =>
                        {
                            b1.Property<string>("LoanApplicationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AnnoulIncome_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AnnoulIncome_Amount");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "LoanAmount", b1 =>
                        {
                            b1.Property<string>("LoanApplicationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Loan_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Loan_Amount");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.OwnsOne("Finance.Domain.Aggregates.LoanAggregate.Enumerations.LoanApplicationType", "LoanType", b1 =>
                        {
                            b1.Property<string>("LoanApplicationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("Loan_Type");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.Navigation("AnnualIncome")
                        .IsRequired();

                    b.Navigation("LoanAmount")
                        .IsRequired();

                    b.Navigation("LoanType")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.LoanDebt", b =>
                {
                    b.HasOne("Finance.Domain.Aggregates.LoanAggregate.Entities.Loan", null)
                        .WithMany("Debts")
                        .HasForeignKey("LoanId");

                    b.OwnsOne("Finance.Domain.Shared.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<string>("LoanDebtId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Debt_Currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Debt_Amount");

                            b1.HasKey("LoanDebtId");

                            b1.ToTable("LoanDebt");

                            b1.WithOwner()
                                .HasForeignKey("LoanDebtId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.AccountAggregate.Entities.BankAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.CustomerAggregate.Entities.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Finance.Domain.Aggregates.LoanAggregate.Entities.Loan", b =>
                {
                    b.Navigation("Debts");
                });
#pragma warning restore 612, 618
        }
    }
}
